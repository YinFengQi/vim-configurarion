global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and x != '0'
endglobal

# ======== Common Operator Snippet ========

priority 100
context math()
snippet taylor "taylor" iAm
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet
priority 0

context math()
snippet `(?<!\\)lim` "limit" irAm
\lim_{${1:n} \to ${2:\infty}}
endsnippet

context math()
snippet `(?<!\\)prod` "product" irAm
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}}$0
endsnippet

context math()
snippet `(?<!\\)Sum|(?<!\\)SUM` "sum" irAm
\sum_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}}$0
endsnippet

priority 300
context math()
snippet `(?<!\\)diff` "d/dx" irAm
\frac{\mathrm{d}${1:y}}{\mathrm{d} ${2:x}}$0
endsnippet
priority 0

# === derivation operators ===
context math()
snippet `(?<!\\)part` "p d/dx" irAm
\frac{\partial ${1:y}}{\partial ${2:x}}$0
endsnippet

context math()
snippet `(?<!\\)vara` "variation d/dx" iArm
\frac{\delta ${1:f}}{\delta ${2:x}}$0
endsnippet


priority 400

context math()
snippet `(?<!\\)([2-9])diff` "d/dx" iAm
\frac{\mathrm{d}^`!p snp.rv = match[1]`${1:y}}{\mathrm{d} ${2:x}^`!p snip.rv = match[1]`}$0
endsnippet

context math()
snippet `(?<!\\)([2-9])part` "pd/dx" irAm
\frac{\partial^`!p snip.rv = match[1]` ${1:y}}{\partial ${2:x}^`!p snip.rv = match[1]`}$0
endsnippet

priority 300
context math()
snippet `(?<!\\)DD` "functional measurment" irAm
\mathcal{D} ${1:x} ${2:(${3:t})} $0
endsnippet

priority 0






